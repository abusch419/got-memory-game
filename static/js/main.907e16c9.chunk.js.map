{"version":3,"sources":["components/GameCard/index.js","components/Wrapper/index.js","components/Header/index.js","App.js","index.js"],"names":["GameCard","props","react_default","a","createElement","className","alt","id","src","image","onClick","clickCount","Wrapper","children","Header","score","highScore","App","state","cards","gameOver","_this","setState","console","log","this","forEach","card","count","alert","concat","find","el","i","sort","Math","random","_this2","components_Wrapper","components_Header","map","components_GameCard","key","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"qlEAiBeA,MAdf,SAAkBC,GAChB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OACEE,IAAKL,EAAMM,GACXC,IAAKP,EAAMQ,MACXC,QAAS,kBAAMT,EAAMU,WAAWV,EAAMM,gBCHjCK,MAJf,SAAiBX,GACb,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMY,iBCS5BC,MAXf,SAAgBb,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASJ,EAAMY,UAC9BX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,UACYJ,EAAMc,MADlB,gBACsCd,EAAMe,oBC6DnCC,6MA5DbC,MAAQ,CACNC,QACAJ,MAAO,EACPC,UAAW,KAGbI,SAAW,WAWT,OAVGC,EAAKH,MAAMH,MAAQM,EAAKH,MAAMF,WAC/BK,EAAKC,SAAS,CAACN,UAAWK,EAAKH,MAAMH,OAAQ,WAC3CQ,QAAQC,IAAIC,KAAKP,MAAMF,aAG3BK,EAAKH,MAAMC,MAAMO,QAAQ,SAAAC,GACvBA,EAAKC,MAAQ,IAEfC,MAAK,qBAAAC,OAAsBT,EAAKH,MAAMH,QACtCM,EAAKC,SAAS,CAACP,MAAO,KACf,KAGTJ,WAAa,SAAAJ,GAIXc,EAAKH,MAAMC,MAAMY,KAAK,SAACC,EAAIC,EAAGd,GAC5B,GAAIa,EAAGzB,KAAOA,EAAI,CAEhB,GAAuB,IAAnBY,EAAMc,GAAGL,MAMX,OALAT,EAAMc,GAAGL,MAAQT,EAAMc,GAAGL,MAAQ,EAClCP,EAAKC,SAAS,CAACP,MAAQM,EAAKH,MAAMH,MAAQ,GAAI,cAG9CM,EAAKH,MAAMC,MAAMe,KAAK,kBAAMC,KAAKC,SAAW,MACrC,EAGPf,EAAKD,uFAOJ,IAAAiB,EAAAZ,KACP,OACEvB,EAAAC,EAAAC,cAACkC,EAAD,KACEpC,EAAAC,EAAAC,cAACmC,EAAD,CAAQxB,MAAOU,KAAKP,MAAMH,MAAOC,UAAWS,KAAKP,MAAMF,WAAvD,eACCS,KAAKP,MAAMC,MAAMqB,IAAI,SAAAb,GAAI,OACxBzB,EAAAC,EAAAC,cAACqC,EAAD,CACA9B,WAAY0B,EAAK1B,WACjBJ,GAAIoB,EAAKpB,GACTmC,IAAKf,EAAKpB,GACVE,MAAOkB,EAAKlB,kBArDJkC,aCDlBC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.907e16c9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction GameCard(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img\n          alt={props.id}\n          src={props.image}\n          onClick={() => props.clickCount(props.id)}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default GameCard;\n","import React from \"react\"\nimport \"./style.css\"\n\nfunction Wrapper(props) {\n    return <div className=\"wrapper\">{props.children}</div>\n}\n\nexport default Wrapper","import React from \"react\";\nimport \"./style.css\";\nfunction Header(props) {\n  return (\n    <div className=\"header\">\n      <div className=\"title\">{props.children}</div>\n      <div className=\"scores\">\n          Score: {props.score} High Score: {props.highScore}\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport GameCard from \"./components/GameCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport cards from \"./cards.json\";\n\nclass App extends Component {\n  state = {\n    cards,\n    score: 0,\n    highScore: 0\n  };\n  \n  gameOver = () => {\n    if(this.state.score > this.state.highScore) {\n      this.setState({highScore: this.state.score}, function() {\n        console.log(this.state.highScore)\n      })\n    }\n    this.state.cards.forEach(card => {\n      card.count = 0;\n    })\n    alert(`Game Over! Score: ${this.state.score}`)\n    this.setState({score: 0})\n    return true\n  }\n \n  clickCount = id => {\n    // .find() will go through the array and return the value of the first element it reaches in the array where the object id matches the id \n    // assgined to the image in the gamecard component\n    // eslint-disable-next-line\n    this.state.cards.find((el, i, cards) => {\n      if (el.id === id) {\n        // if the card hasnt been clicked yet then change its count to 1 indicating it has been clicked\n        if (cards[i].count === 0) {\n          cards[i].count = cards[i].count + 1;\n          this.setState({score : this.state.score + 1}, function(){\n          });\n          // a cool way to sort an array randomly by providin a 50/50 chance of a positive number in the compare function of .sort()\n          this.state.cards.sort(() => Math.random() - 0.5)\n          return true; \n        } \n        else {\n          this.gameOver();\n        }\n      }\n    });\n  }\n\n\n  render() {\n    return (\n      <Wrapper>\n        <Header score={this.state.score} highScore={this.state.highScore}>Memory Game</Header>\n        {this.state.cards.map(card => (\n          <GameCard \n          clickCount={this.clickCount}\n          id={card.id}\n          key={card.id}\n          image={card.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}